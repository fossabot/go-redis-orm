version: 2
jobs:
  test:
    docker:
      # CircleCI Go images available at: https://hub.docker.com/r/circleci/golang/
      - image: circleci/golang:1.10
      # CircleCI PostgreSQL images available at: https://hub.docker.com/r/circleci/mysql/
      - image: circleci/mysql:8
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_DATABASE: goredisorm
      - image: redis

    working_directory: /go/src/github.com/matfax/go-redis-orm

    environment:
      TEST_RESULTS: /tmp/test-results

    steps:
      - run:
          name: Setup Database Client
          command: sudo apt-get update && sudo apt-get install mysql-client
      - run:
          command: |
            go get -u github.com/lib/pq
            go get -u github.com/mattes/migrate
            go get -u github.com/jstemmer/go-junit-report
          name: Install Requirements
      - checkout
      - run:
          name: Create Test Folder
          command: mkdir -p $TEST_RESULTS
      - restore_cache:
          key: dep-
      - run:
          command: dep ensure
          name: Update dependencies
      - save_cache:
          key: dep-{{ checksum "Gopkg.toml" }}-{{ checksum "Gopkg.lock" }}
          paths:
          - vendor
          - Gopkg.lock
      - run:
          name: Wait for Redis
          # preinstalled in circleci/* docker image
          command: dockerize -wait tcp://localhost:6379 -timeout 60s
      - run:
          name: Wait for MySQL
          # preinstalled in circleci/* docker image
          command: dockerize -wait tcp://localhost:3306 -timeout 120s
      - run:
          name: Setup Database
          command: |
            cat ./example/script/*.sql | mysql -u root@'localhost' --password="" goredisorm
      - run:
          name: Build
          command: |
            go install
            go-redis-orm code -i ./example/yaml/ -o ./example/model/
      - run:
          name: Run unit tests
          command: |
            go test -v ./orm/sqlbuilder | go-junit-report  > ${TEST_RESULTS}/sql-builder-report.xml
            go test -v ./example/model/... | go-junit-report  > ${TEST_RESULTS}/go-test-report.xml

      - store_artifacts:
          path: /tmp/test-results
          destination: raw-test-output

      - store_test_results:
          path: /tmp/test-results

workflows:
  version: 2
  test:
    jobs:
      - test
